package ua.marketplace.controllers;

import com.fasterxml.jackson.databind.ObjectMapper; // ObjectMapper is used to convert Java objects to JSON strings
import jakarta.servlet.http.HttpServletRequest; // HttpServletRequest is used to represent an HTTP request
import org.junit.jupiter.api.Test; // JUnit 5 test annotations
import org.springframework.beans.factory.annotation.Autowired; // Autowired is used for automatic dependency injection
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; // AutoConfigureMockMvc is used to configure MockMvc for testing
import org.springframework.boot.test.context.SpringBootTest; // SpringBootTest is used to run the application context for testing
import org.springframework.http.MediaType; // MediaType is used to represent different types of media
import org.springframework.mock.web.MockHttpSession; // MockHttpSession is used to create a mock HTTP session
import org.springframework.test.web.servlet.MockMvc; // MockMvc is used to simulate an HTTP request
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; // MockMvcRequestBuilders is used to build an HTTP request
import ua.marketplace.entities.User; // User entity class
import ua.marketplace.entities.VerificationCode; // VerificationCode entity class
import ua.marketplace.repositoryes.UserRepository; // UserRepository interface
import ua.marketplace.requests.PhoneCodeRequest; // PhoneCodeRequest class
import ua.marketplace.requests.PhoneNumberRequest; // PhoneNumberRequest class
import ua.marketplace.requests.RegistrationRequest; // RegistrationRequest class

import java.time.LocalDateTime; // LocalDateTime is used to represent a date and time
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*; // MockMvcResultMatchers is used to assert the result of an HTTP request
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post; // post is used to build an HTTP POST request

@SpringBootTest // SpringBootTest annotation is used to run the application context for testing
@AutoConfigureMockMvc // AutoConfigureMockMvc annotation is used to configure MockMvc for testing
@SuppressWarnings("PMD") // SuppressWarnings annotation is used to suppress warnings generated by PMD
class PhoneAuthControllerTest {

    @Autowired // Autowired annotation is used for automatic dependency injection
    private MockMvc mockMvc; // MockMvc is used to simulate an HTTP request

    @Autowired // Autowired annotation is used for automatic dependency injection
    private UserRepository userRepository; // UserRepository interface is used to interact with the User entity

    @Test // Test annotation is used to define a test method
    void testRegisterSuccessfully() throws Exception {

        RegistrationRequest request = new RegistrationRequest(
                "Test", // firstName variable is used to store the first name of the user
                "+380123456785"); // phoneNumber variable is used to store the phone number of the user

        mockMvc.perform(post("/v1/auth/registration") // post is used to build an HTTP POST request
                        .contentType(MediaType.APPLICATION_JSON) // contentType is used to set the content type of the request
                        .content(asJsonString(request))) // asJsonString method is used to convert the request object to a JSON string
                .andExpect(status().isAccepted()) // status is used to assert the HTTP status code of the response
                .andExpect(content().contentType(MediaType.APPLICATION_JSON)) // contentType is used to assert the content type of the response
                .andExpect(jsonPath("$.phoneNumber").value("+380123456785")); // jsonPath is used to assert the value of a JSON property
    }

    // Other test methods have been omitted for brevity

    /**
     * The test does not work correctly on H2 memory database.
     * For a Postgres database, apply the following conditions:
     * .andExpect(status().isOk())
     * .andExpect(content().contentType(MediaType.APPLICATION_JSON))
     * .andExpect(jsonPath("$.phoneNumber").value(request.getPhoneNumber()));
     */
    @Test // Test annotation is used to define a test method
    void testLoginSuccessfully() throws Exception {

        PhoneNumberRequest request = new PhoneNumberRequest(
                "+380123467895"); // phoneNumber variable is used to store the phone number of the user

        User user = User.builder().phoneNumber(request.phoneNumber())
                .firstName("Test").build(); // User entity is created with the phone number and first name
        VerificationCode code = VerificationCode.builder()
                .code("1111")
                .createdTimeCode(LocalDateTime.now().minusMinutes(1))
                .user(user)
                .build(); // VerificationCode entity is created with the code, created time, and user
        user.setVerificationCode(code); // User entity is associated with the VerificationCode entity
        userRepository.save(user); // User entity is saved to the database

        mockMvc.perform(post("/v1/auth/login") // post is used to build an HTTP POST request
                        .contentType(MediaType.APPLICATION_JSON) // contentType is used to set the content type of the request
                        .content(asJsonString(request))) // asJsonString method is used to convert the request object to a JSON string
                .andExpect(status().isConflict()) // status is used to assert the HTTP status code of the response
                .andExpect(content().contentType(MediaType.APPLICATION_JSON)) // contentType is used to assert the content type of the response
                .andExpect(jsonPath("$.errorMessage")
                        .value("Time to send a repeat code 1 minute")); // jsonPath is used to assert the value of a JSON property
    }

    // Other test methods have been omitted for brevity

    private String asJsonString(Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj); // ObjectMapper is used to convert the Java object to a JSON string
        } catch (Exception e) {
            throw new RuntimeException(e); // RuntimeException is thrown if there is an error while converting the object to a JSON string
        }
    }
}
